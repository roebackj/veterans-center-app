import React, { useState, useEffect } from 'react';
import Search from './searchfunction';
import Navigation from './navigation';
import './checklist.css';

const SecurePage = () => {
    const [data, setData] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [checkedDocs, setCheckedDocs] = useState({});

    // Function to handle scan data passed from Navigation
    const handleScanData = (result) => {
        setData(result);
    };

    // Function to fetch initial data
    const fetchData = async () => {
        try {
            const response = await fetch('http://localhost:3000/api/data/initial'); // Replace with actual endpoint
            const result = await response.json();
            setData(result);
        } catch (error) {
            console.error('Error fetching initial data:', error);
        }
    };

    // Benefits to required documents logic
    const requiredDocsMapping = {
        'Chapter 30': ['COE', 'Enrollment Manager', 'Schedule'],
        'Chapter 31': ['Enrollment Manager', 'Schedule'],
        'Chapter 33 Post 9/11': ['COE', 'Enrollment Manager', 'Schedule'],
        'Chapter 35': ['COE', 'Enrollment Manager', 'Schedule'],
        'Fed TA': ['TAR', 'Enrollment Manager', 'Schedule'],
        'State TA': ['Award Letter', 'Enrollment Manager', 'Schedule'],
        'Missouri Returning Heroes': ['DD214', 'Enrollment Manager', 'Schedule'],
    };

    // Load data on component mount
    useEffect(() => {
        fetchData();
    }, []);

    // Filter data based on search term
    const filteredData = data.filter((item) => {
        const fullName = item["Last Name, First Name (Legal Name)"];
        if (!fullName) return false;

        const [lastName, firstName] = fullName.split(',').map(name => name.trim());
        const displayName = `${firstName} ${lastName}`;

        return displayName.toLowerCase().startsWith(searchTerm.toLowerCase());
    });

    // Clean benefit function
    const cleanBenefit = (benefit) => {
        if (benefit.includes("Missouri Returning Heroes")) {
            return "Missouri Returning Heroes";
        } else if (benefit.includes("Chapter 33 Post 9/11")) {
            return "Chapter 33 Post 9/11";
        } else if (benefit.includes("Chapter 31 VocRehab")) {
            return "Chapter 31";
        } else if (benefit.includes("State Tuition Assistance Deadline")) {
            return "State TA";
        } else if (benefit.includes("Chapter 35")) {
            return "Chapter 35";
        } else if (benefit.includes("Chapter 30 MGIB")) {
            return "Chapter 30";
        } else if (benefit.includes("Federal Tuition Assistance Deadline")) {
            return "Fed TA";
        } else {
            return benefit;  // Fallback if benefit is not mapped
        }
    };

    // Function to clean and join benefits
    const getCleanedBenefits = (benefits) => {
        if (typeof benefits !== 'string') return '';
        return benefits.split(';')
            .map(benefit => benefit.trim())
            .map(cleanBenefit)
            .filter(Boolean)
            .join('; ');
    };

    // Function to get required documents based on benefits
    const getRequiredDocs = (benefitString) => {
        const benefits = getCleanedBenefits(benefitString).split('; ');
        const requiredDocs = benefits.flatMap(benefit => requiredDocsMapping[benefit] || []);
        return [...new Set(requiredDocs)]; // Remove duplicates
    };

    const handleCheckboxChange = (docId) => {
        setCheckedDocs(prevState => ({
            ...prevState,
            [docId]: !prevState[docId],
        }));
    };

    const updateDate = (studentID) => {
        // Implement date update logic here
    };

    return (
        <div className="secure-page">
            <Navigation onScan={handleScanData} />
            <div className="content">
                <img src="https://i.imgur.com/SROEj2Q.jpeg" alt="Company Logo" className="company-logo" />
                <Search searchTerm={searchTerm} setSearchTerm={setSearchTerm} />

                {filteredData.length > 0 ? (
                    <table className="data-table">
                        <thead>
                            <tr>
                                <th className="red-header">Name</th>
                                <th className="red-header">Student ID</th>
                                <th className="red-header">Benefit</th>
                                <th className="red-header">Required Documents</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredData.map((item, index) => {
                                const fullName = item["Last Name, First Name (Legal Name)"] || 'Unknown';
                                const [lastName, firstName] = fullName.split(',').map(name => name.trim());
                                const displayName = `${firstName}, ${lastName}`;
                                const studentID = item["Student ID # (This is NOT your Social Security Number or SSO ID)"] || 'N/A';
                                const benefits = item["Benefit you plan to utilize this term (check all that apply):"];
                                const requiredDocs = getRequiredDocs(benefits);

                                return (
                                    <tr key={index}>
                                        <td>{displayName}</td>
                                        <td>{studentID}</td>
                                        <td>{getCleanedBenefits(benefits)}</td>
                                        <td>
                                            {requiredDocs.length > 0 ? (
                                                requiredDocs.map((doc, docIndex) => {
                                                    const docId = `${doc}-${studentID}`;
                                                    const isChecked = checkedDocs[docId] || false; // Get checked state

                                                    return (
                                                        <div key={docIndex} className="checkbox-container">
                                                            <input
                                                                type="checkbox"
                                                                id={docId}
                                                                checked={isChecked} // Set checkbox checked state
                                                                onChange={() => handleCheckboxChange(docId)} // Call updated handler
                                                            />
                                                            <label htmlFor={docId} className={isChecked ? 'checked-label' : ''}>Added</label>
                                                            <div className={`benefit-box ${isChecked ? 'active' : ''}`} id={`box-${docId}`}>
                                                                <span>{doc}</span>
                                                            </div>
                                                        </div>
                                                    );
                                                })
                                            ) : (
                                                <div>No documents required</div>
                                            )}

                                            <div className="date-container">
                                                <input
                                                    type="checkbox"
                                                    id={`date-${studentID}`}
                                                    onChange={() => updateDate(studentID)}
                                                />
                                                <label htmlFor={`date-${studentID}`}>Date Checked</label>
                                                <div className="date-box" id={`date-box-${studentID}`}>
                                                    <span className="date-checked" id={`date-checked-${studentID}`}></span>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                ) : (
                    <p>No veterans matching search</p>
                )}
            </div>
        </div>
    );
};

export default SecurePage;
